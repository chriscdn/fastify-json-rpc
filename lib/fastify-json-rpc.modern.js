import e from"isobject";import r from"is-function";import s from"fastify-plugin";const t={PARSEERROR:{code:-32700,message:"Parse error"},INVALIDREQUEST:{code:-32600,message:"Invalid Request"},METHODNOTFOUND:{code:-32601,message:"Method not found"},INVALIDPARAMS:{code:-32602,message:"Invalid params"},INTERNALERROR:{code:-32603,message:"Internal error"}};class o extends Error{constructor(e=t.INTERNALERROR.message,r=null,s=t.INTERNALERROR.code){"string"!=typeof e?(super(e.message),this.code=void 0,this.data=void 0,this.code=e.code,this.data=e.data):(super(e),this.code=void 0,this.data=void 0,this.code=s,this.data=r)}}const n=(e,r)=>(r instanceof o||(r=new o(t.INTERNALERROR,{internal:r.message})),{jsonrpc:"2.0",error:{code:r.code,data:r.data,message:r.message},id:e}),a=async(s,o,a,i)=>{const d=i.method,p=i.id,c=i.params,y=a[d];if("2.0"!=i.jsonrpc||null==d)return n(p,t.INVALIDREQUEST);if(c&&!e(c)&&!Array.isArray(c))return n(p,t.INVALIDREQUEST);if(!r(y))return n(p,t.METHODNOTFOUND);try{return((e,r)=>({jsonrpc:"2.0",result:r,id:e}))(p,await y.call(a,{params:c,logger:s.log}))}catch(e){return console.log(e),n(p,e)}},i=s((e,r,s)=>{e.addSchema({$id:"json-rpc-request-body",type:"object",properties:{jsonrpc:{type:"string",enum:["2.0"]},method:{type:"string"},params:{oneOf:[{type:"object"},{type:"array"}]},id:{anyOf:[{type:"integer"},{type:"string"},{type:"null"}]}},required:["jsonrpc","method"]}),e.addSchema({$id:"json-rpc-response",type:"object",properties:{jsonrpc:{type:"string",enum:["2.0"]},result:{type:"string"},error:{type:"object"},id:{anyOf:[{type:"integer"},{type:"string"},{type:"null"}]}},oneOf:[{type:"object",required:["jsonrpc","id","result"]},{type:"object",required:["jsonrpc","id","error"]}]}),e.decorate("rpcify",(r,s)=>{e.post(r,{schema:{description:"A JSON-RPC interface using POST.",params:{type:"object"},body:{oneOf:[{$ref:"json-rpc-request-body#"},{type:"array",items:{$ref:"json-rpc-request-body#"}}]},response:{200:{oneOf:[{$ref:"json-rpc-response#"},{type:"array",items:{$ref:"json-rpc-response#"}}]}}},async handler(e,r){const o=e.body;return Array.isArray(o)?r.send(await Promise.all(o.map(r=>a(e,0,s,r)))):"2.0"===(null==(i=o)?void 0:i.jsonrpc)&&Boolean(null==i?void 0:i.method)?r.send(await a(e,0,s,o)):r.send(n(null,t.PARSEERROR));var i}})}),s()});export{o as CustomError,t as ErrorCodes,i as fastifyPlugin};
//# sourceMappingURL=fastify-json-rpc.modern.js.map

{"version":3,"file":"fastify-json-rpc.modern.js","sources":["../src/fastify-plugin-errors.ts","../src/fastify-plugin.ts"],"sourcesContent":["import { ErrorObj } from \"./types\";\n\nconst ErrorCodes: Record<string, ErrorObj> = {\n  PARSEERROR: {\n    code: -32700,\n    message: \"Parse error\",\n  },\n  INVALIDREQUEST: {\n    code: -32600,\n    message: \"Invalid Request\",\n  },\n  METHODNOTFOUND: {\n    code: -32601,\n    message: \"Method not found\",\n  },\n  INVALIDPARAMS: {\n    code: -32602,\n    message: \"Invalid params\",\n  },\n  INTERNALERROR: {\n    code: -32603,\n    message: \"Internal error\",\n  },\n};\n\n// -32000 to -32099 is reserved!\n\nconst isErrorObj = (item: string | ErrorObj): item is ErrorObj =>\n  typeof item !== \"string\";\n\nclass CustomError extends Error {\n  public code: ErrorObj[\"code\"];\n  public data: ErrorObj[\"data\"] | null;\n\n  constructor(\n    message: string | ErrorObj = ErrorCodes.INTERNALERROR.message,\n    data: ErrorObj[\"data\"] = null,\n    code: ErrorObj[\"code\"] = ErrorCodes.INTERNALERROR.code,\n  ) {\n    if (isErrorObj(message)) {\n      super(message.message);\n      this.code = message.code;\n      this.data = message.data;\n    } else {\n      super(message);\n      this.code = code;\n      this.data = data;\n    }\n  }\n}\n\nexport { CustomError, ErrorCodes };\n","import isobject from \"isobject\";\nimport isFunction from \"is-function\";\nimport fp from \"fastify-plugin\";\nimport {\n  type FastifyPluginOptions,\n  type FastifyReply,\n  type FastifyRequest,\n} from \"fastify\";\nimport { CustomError, ErrorCodes } from \"./fastify-plugin-errors\";\nimport { JSONRPCRequest, JSONRPCResponse, JSONRPCResponseError } from \"./types\";\n\n/**\n * Where you put this is important. Seems to work fine here.\n */\ndeclare module \"fastify\" {\n  interface FastifyInstance {\n    rpcify: (prefix: string, methods: RPCMethods) => void;\n  }\n}\n\ntype TID = JSONRPCRequest[\"id\"];\nexport type StructuredObject = { [key: string]: any } | any[];\ntype RPCMethods = Record<string, RPCMethod<any>>;\ntype Logger = FastifyRequest[\"log\"];\n\nexport type RPCMethod<T extends StructuredObject, R = any> = (\n  { params, logger }: { params: T; logger: Logger },\n) => Promise<R> | R;\n\nconst isJSONRPCRequestObj = (item: unknown): item is JSONRPCRequest => {\n  const testItem = item as JSONRPCRequest;\n  return (testItem?.jsonrpc === \"2.0\" && Boolean(testItem?.method));\n};\n\nconst successObject = <T>(id: TID, result: T): JSONRPCResponse<T> => {\n  return {\n    jsonrpc: \"2.0\",\n    result,\n    id,\n  };\n};\n\nconst errorObject = (\n  id: TID,\n  err: JSONRPCResponseError[\"error\"] | CustomError,\n) => {\n  if (err instanceof CustomError) {\n    // all good\n  } else {\n    const message = err.message;\n    err = new CustomError(ErrorCodes.INTERNALERROR, { internal: message });\n  }\n\n  const error = {\n    code: err.code,\n    data: err.data ?? 1234,\n    message: err.message,\n  };\n\n  // console.log(error);\n\n  return {\n    jsonrpc: \"2.0\",\n    error,\n    id,\n  };\n};\n\nconst processRequest = async (\n  req: FastifyRequest,\n  _res: FastifyReply,\n  methods: RPCMethods,\n  body: JSONRPCRequest,\n) => {\n  const jsonrpc = body.jsonrpc;\n  const methodName = body.method;\n  const id = body.id;\n\n  const params = body.params;\n\n  const method = methods[methodName];\n\n  if (jsonrpc !== \"2.0\" || methodName == null) {\n    return errorObject(id, ErrorCodes.INVALIDREQUEST);\n  } else if (params && !(isobject(params) || Array.isArray(params))) {\n    return errorObject(id, ErrorCodes.INVALIDREQUEST);\n  } else if (isFunction(method)) {\n    try {\n      return successObject(\n        id,\n        await method.call(methods, { params, logger: req.log }),\n      );\n    } catch (err) {\n      // keep this console.log for sanity sake\n      console.log(\"***** RPC Method threw an exception.\");\n      console.log(err);\n      console.log(\"*****\");\n\n      return errorObject(id, err);\n    }\n  } else {\n    return errorObject(id, ErrorCodes.METHODNOTFOUND);\n  }\n};\n\n// For whatever reason `fastify: FastifyInstance`, breaks here\nconst registerPlugin = (\n  // fastify: FastifyInstance,\n  fastify: any,\n  _opts: FastifyPluginOptions,\n  done,\n) => {\n  fastify.addSchema({\n    $id: \"json-rpc-request-body\",\n    type: \"object\",\n    properties: {\n      jsonrpc: {\n        type: \"string\",\n        enum: [\"2.0\"],\n      },\n      method: {\n        type: \"string\",\n      },\n      params: {\n        oneOf: [{ type: \"object\" }, { type: \"array\" }],\n      },\n      id: {\n        anyOf: [{ type: \"integer\" }, { type: \"string\" }, { type: \"null\" }],\n      },\n    },\n    required: [\"jsonrpc\", \"method\"],\n  });\n\n  fastify.addSchema({\n    $id: \"json-rpc-response\",\n    type: \"object\",\n    properties: {\n      jsonrpc: {\n        type: \"string\",\n        enum: [\"2.0\"],\n      },\n      result: {},\n      error: {\n        type: \"object\",\n        properties: {\n          code: {\n            type: \"number\",\n          },\n          message: {\n            type: \"string\",\n          },\n          data: {},\n        },\n        required: [\"code\"],\n      },\n      id: {\n        anyOf: [{ type: \"integer\" }, { type: \"string\" }, { type: \"null\" }],\n      },\n    },\n    oneOf: [\n      { type: \"object\", required: [\"jsonrpc\", \"id\", \"result\"] },\n      { type: \"object\", required: [\"jsonrpc\", \"id\", \"error\"] },\n    ],\n  });\n\n  fastify.decorate(\"rpcify\", (prefix: string, methods: RPCMethods) => {\n    fastify.post(prefix, {\n      schema: {\n        description: \"A JSON-RPC interface using POST.\",\n        params: {\n          type: \"object\",\n        },\n        body: {\n          oneOf: [\n            {\n              $ref: \"json-rpc-request-body#\",\n            },\n            {\n              type: \"array\",\n              items: {\n                $ref: \"json-rpc-request-body#\",\n              },\n            },\n          ],\n        },\n        response: {\n          200: {\n            oneOf: [\n              {\n                $ref: \"json-rpc-response#\",\n              },\n              {\n                type: \"array\",\n                items: {\n                  $ref: \"json-rpc-response#\",\n                },\n              },\n            ],\n          },\n        },\n      },\n      async handler(request, reply) {\n        const body = request.body as JSONRPCRequest | JSONRPCRequest[];\n\n        if (Array.isArray(body)) {\n          return reply.send(\n            await Promise.all(\n              body.map((item) => processRequest(request, reply, methods, item)),\n            ),\n          );\n        } else if (isJSONRPCRequestObj(body)) {\n          return reply.send(\n            await processRequest(request, reply, methods, body),\n          );\n        } else {\n          return reply.send(errorObject(null, ErrorCodes.PARSEERROR));\n        }\n      },\n    });\n  });\n\n  done();\n};\n\nconst fastifyPlugin = fp(registerPlugin);\n\nexport { fastifyPlugin };\n"],"names":["ErrorCodes","PARSEERROR","code","message","INVALIDREQUEST","METHODNOTFOUND","INVALIDPARAMS","INTERNALERROR","CustomError","Error","constructor","data","super","this","errorObject","id","err","_err$data","internal","jsonrpc","error","processRequest","async","req","_res","methods","body","methodName","method","params","isobject","Array","isArray","isFunction","successObject","result","call","logger","log","console","fastifyPlugin","fp","registerPlugin","fastify","_opts","done","addSchema","$id","type","properties","enum","oneOf","anyOf","required","decorate","prefix","post","schema","description","$ref","items","response","handler","request","reply","send","Promise","all","map","item","testItem","Boolean"],"mappings":"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"}